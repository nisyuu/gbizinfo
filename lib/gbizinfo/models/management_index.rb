=begin
#gBizINFO REST API

#<div>各REST APIはHTTPリクエストヘッダ\"X-hojinInfo-api-token\"に動作確認用のAPIトークン\"DTcLxzo1lZaUYaQPVdSRxdS4MzlXNCs4\"を指定して動作を確認することができます。</div><div>※動作確認用のAPIトークンはこのページでの動作確認でのみ使用してください。</div><div>※REST APIを利用する際は必ず、<a href='https://info.gbiz.go.jp/hojin/api_registration/form'>Web API利用申請</a>を行い、APIトークンを取得してください。</div>

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.0

=end

require 'date'
require 'time'

module Gbizinfo
  class ManagementIndex
    # 資本金
    attr_accessor :capital_stock_summary_of_business_results

    # 資本金(単位)
    attr_accessor :capital_stock_summary_of_business_results_unit_ref

    # 営業総収入
    attr_accessor :gross_operating_revenue_summary_of_business_results

    # 営業総収入（単位）
    attr_accessor :gross_operating_revenue_summary_of_business_results_unit_ref

    # 純資産額
    attr_accessor :net_assets_summary_of_business_results

    # 純資産額(単位)
    attr_accessor :net_assets_summary_of_business_results_unit_ref

    # 当期純利益又は当期純損失(△)
    attr_accessor :net_income_loss_summary_of_business_results

    # 当期純利益又は当期純損失(△)(単位)
    attr_accessor :net_income_loss_summary_of_business_results_unit_ref

    # 正味収入保険料
    attr_accessor :net_premiums_written_summary_of_business_results_ins

    # 正味収入保険料（単位）
    attr_accessor :net_premiums_written_summary_of_business_results_ins_unit_ref

    # 売上高
    attr_accessor :net_sales_summary_of_business_results

    # 売上高(単位)
    attr_accessor :net_sales_summary_of_business_results_unit_ref

    # 従業員数
    attr_accessor :number_of_employees

    # 従業員数(単位)
    attr_accessor :number_of_employees_unit_ref

    # 営業収益
    attr_accessor :operating_revenue1_summary_of_business_results

    # 営業収益（単位）
    attr_accessor :operating_revenue1_summary_of_business_results_unit_ref

    # 営業収入
    attr_accessor :operating_revenue2_summary_of_business_results

    # 営業収入（単位）
    attr_accessor :operating_revenue2_summary_of_business_results_unit_ref

    # 経常利益又は経常損失(△)
    attr_accessor :ordinary_income_loss_summary_of_business_results

    # 経常利益又は経常損失(△)(単位)
    attr_accessor :ordinary_income_loss_summary_of_business_results_unit_ref

    # 経常収益
    attr_accessor :ordinary_income_summary_of_business_results

    # 経常収益（単位）
    attr_accessor :ordinary_income_summary_of_business_results_unit_ref

    # 回次
    attr_accessor :period

    # 総資産額
    attr_accessor :total_assets_summary_of_business_results

    # 総資産額(単位)
    attr_accessor :total_assets_summary_of_business_results_unit_ref

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'capital_stock_summary_of_business_results' => :'capital_stock_summary_of_business_results',
        :'capital_stock_summary_of_business_results_unit_ref' => :'capital_stock_summary_of_business_results_unit_ref',
        :'gross_operating_revenue_summary_of_business_results' => :'gross_operating_revenue_summary_of_business_results',
        :'gross_operating_revenue_summary_of_business_results_unit_ref' => :'gross_operating_revenue_summary_of_business_results_unit_ref',
        :'net_assets_summary_of_business_results' => :'net_assets_summary_of_business_results',
        :'net_assets_summary_of_business_results_unit_ref' => :'net_assets_summary_of_business_results_unit_ref',
        :'net_income_loss_summary_of_business_results' => :'net_income_loss_summary_of_business_results',
        :'net_income_loss_summary_of_business_results_unit_ref' => :'net_income_loss_summary_of_business_results_unit_ref',
        :'net_premiums_written_summary_of_business_results_ins' => :'net_premiums_written_summary_of_business_results_ins',
        :'net_premiums_written_summary_of_business_results_ins_unit_ref' => :'net_premiums_written_summary_of_business_results_ins_unit_ref',
        :'net_sales_summary_of_business_results' => :'net_sales_summary_of_business_results',
        :'net_sales_summary_of_business_results_unit_ref' => :'net_sales_summary_of_business_results_unit_ref',
        :'number_of_employees' => :'number_of_employees',
        :'number_of_employees_unit_ref' => :'number_of_employees_unit_ref',
        :'operating_revenue1_summary_of_business_results' => :'operating_revenue1_summary_of_business_results',
        :'operating_revenue1_summary_of_business_results_unit_ref' => :'operating_revenue1_summary_of_business_results_unit_ref',
        :'operating_revenue2_summary_of_business_results' => :'operating_revenue2_summary_of_business_results',
        :'operating_revenue2_summary_of_business_results_unit_ref' => :'operating_revenue2_summary_of_business_results_unit_ref',
        :'ordinary_income_loss_summary_of_business_results' => :'ordinary_income_loss_summary_of_business_results',
        :'ordinary_income_loss_summary_of_business_results_unit_ref' => :'ordinary_income_loss_summary_of_business_results_unit_ref',
        :'ordinary_income_summary_of_business_results' => :'ordinary_income_summary_of_business_results',
        :'ordinary_income_summary_of_business_results_unit_ref' => :'ordinary_income_summary_of_business_results_unit_ref',
        :'period' => :'period',
        :'total_assets_summary_of_business_results' => :'total_assets_summary_of_business_results',
        :'total_assets_summary_of_business_results_unit_ref' => :'total_assets_summary_of_business_results_unit_ref'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'capital_stock_summary_of_business_results' => :'Integer',
        :'capital_stock_summary_of_business_results_unit_ref' => :'String',
        :'gross_operating_revenue_summary_of_business_results' => :'Integer',
        :'gross_operating_revenue_summary_of_business_results_unit_ref' => :'String',
        :'net_assets_summary_of_business_results' => :'Integer',
        :'net_assets_summary_of_business_results_unit_ref' => :'String',
        :'net_income_loss_summary_of_business_results' => :'Integer',
        :'net_income_loss_summary_of_business_results_unit_ref' => :'String',
        :'net_premiums_written_summary_of_business_results_ins' => :'Integer',
        :'net_premiums_written_summary_of_business_results_ins_unit_ref' => :'String',
        :'net_sales_summary_of_business_results' => :'Integer',
        :'net_sales_summary_of_business_results_unit_ref' => :'String',
        :'number_of_employees' => :'Integer',
        :'number_of_employees_unit_ref' => :'String',
        :'operating_revenue1_summary_of_business_results' => :'Integer',
        :'operating_revenue1_summary_of_business_results_unit_ref' => :'String',
        :'operating_revenue2_summary_of_business_results' => :'Integer',
        :'operating_revenue2_summary_of_business_results_unit_ref' => :'String',
        :'ordinary_income_loss_summary_of_business_results' => :'Integer',
        :'ordinary_income_loss_summary_of_business_results_unit_ref' => :'String',
        :'ordinary_income_summary_of_business_results' => :'Integer',
        :'ordinary_income_summary_of_business_results_unit_ref' => :'String',
        :'period' => :'String',
        :'total_assets_summary_of_business_results' => :'Integer',
        :'total_assets_summary_of_business_results_unit_ref' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Gbizinfo::ManagementIndex` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Gbizinfo::ManagementIndex`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'capital_stock_summary_of_business_results')
        self.capital_stock_summary_of_business_results = attributes[:'capital_stock_summary_of_business_results']
      end

      if attributes.key?(:'capital_stock_summary_of_business_results_unit_ref')
        self.capital_stock_summary_of_business_results_unit_ref = attributes[:'capital_stock_summary_of_business_results_unit_ref']
      end

      if attributes.key?(:'gross_operating_revenue_summary_of_business_results')
        self.gross_operating_revenue_summary_of_business_results = attributes[:'gross_operating_revenue_summary_of_business_results']
      end

      if attributes.key?(:'gross_operating_revenue_summary_of_business_results_unit_ref')
        self.gross_operating_revenue_summary_of_business_results_unit_ref = attributes[:'gross_operating_revenue_summary_of_business_results_unit_ref']
      end

      if attributes.key?(:'net_assets_summary_of_business_results')
        self.net_assets_summary_of_business_results = attributes[:'net_assets_summary_of_business_results']
      end

      if attributes.key?(:'net_assets_summary_of_business_results_unit_ref')
        self.net_assets_summary_of_business_results_unit_ref = attributes[:'net_assets_summary_of_business_results_unit_ref']
      end

      if attributes.key?(:'net_income_loss_summary_of_business_results')
        self.net_income_loss_summary_of_business_results = attributes[:'net_income_loss_summary_of_business_results']
      end

      if attributes.key?(:'net_income_loss_summary_of_business_results_unit_ref')
        self.net_income_loss_summary_of_business_results_unit_ref = attributes[:'net_income_loss_summary_of_business_results_unit_ref']
      end

      if attributes.key?(:'net_premiums_written_summary_of_business_results_ins')
        self.net_premiums_written_summary_of_business_results_ins = attributes[:'net_premiums_written_summary_of_business_results_ins']
      end

      if attributes.key?(:'net_premiums_written_summary_of_business_results_ins_unit_ref')
        self.net_premiums_written_summary_of_business_results_ins_unit_ref = attributes[:'net_premiums_written_summary_of_business_results_ins_unit_ref']
      end

      if attributes.key?(:'net_sales_summary_of_business_results')
        self.net_sales_summary_of_business_results = attributes[:'net_sales_summary_of_business_results']
      end

      if attributes.key?(:'net_sales_summary_of_business_results_unit_ref')
        self.net_sales_summary_of_business_results_unit_ref = attributes[:'net_sales_summary_of_business_results_unit_ref']
      end

      if attributes.key?(:'number_of_employees')
        self.number_of_employees = attributes[:'number_of_employees']
      end

      if attributes.key?(:'number_of_employees_unit_ref')
        self.number_of_employees_unit_ref = attributes[:'number_of_employees_unit_ref']
      end

      if attributes.key?(:'operating_revenue1_summary_of_business_results')
        self.operating_revenue1_summary_of_business_results = attributes[:'operating_revenue1_summary_of_business_results']
      end

      if attributes.key?(:'operating_revenue1_summary_of_business_results_unit_ref')
        self.operating_revenue1_summary_of_business_results_unit_ref = attributes[:'operating_revenue1_summary_of_business_results_unit_ref']
      end

      if attributes.key?(:'operating_revenue2_summary_of_business_results')
        self.operating_revenue2_summary_of_business_results = attributes[:'operating_revenue2_summary_of_business_results']
      end

      if attributes.key?(:'operating_revenue2_summary_of_business_results_unit_ref')
        self.operating_revenue2_summary_of_business_results_unit_ref = attributes[:'operating_revenue2_summary_of_business_results_unit_ref']
      end

      if attributes.key?(:'ordinary_income_loss_summary_of_business_results')
        self.ordinary_income_loss_summary_of_business_results = attributes[:'ordinary_income_loss_summary_of_business_results']
      end

      if attributes.key?(:'ordinary_income_loss_summary_of_business_results_unit_ref')
        self.ordinary_income_loss_summary_of_business_results_unit_ref = attributes[:'ordinary_income_loss_summary_of_business_results_unit_ref']
      end

      if attributes.key?(:'ordinary_income_summary_of_business_results')
        self.ordinary_income_summary_of_business_results = attributes[:'ordinary_income_summary_of_business_results']
      end

      if attributes.key?(:'ordinary_income_summary_of_business_results_unit_ref')
        self.ordinary_income_summary_of_business_results_unit_ref = attributes[:'ordinary_income_summary_of_business_results_unit_ref']
      end

      if attributes.key?(:'period')
        self.period = attributes[:'period']
      end

      if attributes.key?(:'total_assets_summary_of_business_results')
        self.total_assets_summary_of_business_results = attributes[:'total_assets_summary_of_business_results']
      end

      if attributes.key?(:'total_assets_summary_of_business_results_unit_ref')
        self.total_assets_summary_of_business_results_unit_ref = attributes[:'total_assets_summary_of_business_results_unit_ref']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          capital_stock_summary_of_business_results == o.capital_stock_summary_of_business_results &&
          capital_stock_summary_of_business_results_unit_ref == o.capital_stock_summary_of_business_results_unit_ref &&
          gross_operating_revenue_summary_of_business_results == o.gross_operating_revenue_summary_of_business_results &&
          gross_operating_revenue_summary_of_business_results_unit_ref == o.gross_operating_revenue_summary_of_business_results_unit_ref &&
          net_assets_summary_of_business_results == o.net_assets_summary_of_business_results &&
          net_assets_summary_of_business_results_unit_ref == o.net_assets_summary_of_business_results_unit_ref &&
          net_income_loss_summary_of_business_results == o.net_income_loss_summary_of_business_results &&
          net_income_loss_summary_of_business_results_unit_ref == o.net_income_loss_summary_of_business_results_unit_ref &&
          net_premiums_written_summary_of_business_results_ins == o.net_premiums_written_summary_of_business_results_ins &&
          net_premiums_written_summary_of_business_results_ins_unit_ref == o.net_premiums_written_summary_of_business_results_ins_unit_ref &&
          net_sales_summary_of_business_results == o.net_sales_summary_of_business_results &&
          net_sales_summary_of_business_results_unit_ref == o.net_sales_summary_of_business_results_unit_ref &&
          number_of_employees == o.number_of_employees &&
          number_of_employees_unit_ref == o.number_of_employees_unit_ref &&
          operating_revenue1_summary_of_business_results == o.operating_revenue1_summary_of_business_results &&
          operating_revenue1_summary_of_business_results_unit_ref == o.operating_revenue1_summary_of_business_results_unit_ref &&
          operating_revenue2_summary_of_business_results == o.operating_revenue2_summary_of_business_results &&
          operating_revenue2_summary_of_business_results_unit_ref == o.operating_revenue2_summary_of_business_results_unit_ref &&
          ordinary_income_loss_summary_of_business_results == o.ordinary_income_loss_summary_of_business_results &&
          ordinary_income_loss_summary_of_business_results_unit_ref == o.ordinary_income_loss_summary_of_business_results_unit_ref &&
          ordinary_income_summary_of_business_results == o.ordinary_income_summary_of_business_results &&
          ordinary_income_summary_of_business_results_unit_ref == o.ordinary_income_summary_of_business_results_unit_ref &&
          period == o.period &&
          total_assets_summary_of_business_results == o.total_assets_summary_of_business_results &&
          total_assets_summary_of_business_results_unit_ref == o.total_assets_summary_of_business_results_unit_ref
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [capital_stock_summary_of_business_results, capital_stock_summary_of_business_results_unit_ref, gross_operating_revenue_summary_of_business_results, gross_operating_revenue_summary_of_business_results_unit_ref, net_assets_summary_of_business_results, net_assets_summary_of_business_results_unit_ref, net_income_loss_summary_of_business_results, net_income_loss_summary_of_business_results_unit_ref, net_premiums_written_summary_of_business_results_ins, net_premiums_written_summary_of_business_results_ins_unit_ref, net_sales_summary_of_business_results, net_sales_summary_of_business_results_unit_ref, number_of_employees, number_of_employees_unit_ref, operating_revenue1_summary_of_business_results, operating_revenue1_summary_of_business_results_unit_ref, operating_revenue2_summary_of_business_results, operating_revenue2_summary_of_business_results_unit_ref, ordinary_income_loss_summary_of_business_results, ordinary_income_loss_summary_of_business_results_unit_ref, ordinary_income_summary_of_business_results, ordinary_income_summary_of_business_results_unit_ref, period, total_assets_summary_of_business_results, total_assets_summary_of_business_results_unit_ref].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Gbizinfo.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
